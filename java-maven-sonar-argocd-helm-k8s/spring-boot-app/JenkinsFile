pipeline {
  agent {
    docker {
     image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo "Checkout stage passed"'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.165.28.77:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('check Docker installation'){
        steps{
            script{
                sh 'docker --version'
            }
        }
    }
      stage('Install Unzip') {
            steps {
                script {
                    // Install unzip if it's not available
                    sh '''
                        if ! [ -x "$(command -v unzip)" ]; then
                          echo "Installing unzip..."
                          apt-get update
                           apt-get install -y unzip
                        fi
                    '''
                }
            }
  }
    stage('AWS Installation'){
        steps{
            script{
                sh 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"'
                sh '/usr/bin/unzip awscliv2.zip'
                sh 'sudo ./aws/install'
            }
        }
    }
    stage('check AWS Version'){
        steps{
            script{
                sh 'aws --version'
            }
        }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "440588537421.dkr.ecr.us-east-1.amazonaws.com/cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
            // Log in to AWS ECR
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr-cred', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 440588537421.dkr.ecr.us-east-1.amazonaws.com'
            }
            
            // Build the Docker image
            sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
            
            // Push the Docker image to ECR
            sh "docker push ${DOCKER_IMAGE}"
        }
      }
    }
 
  }
}
